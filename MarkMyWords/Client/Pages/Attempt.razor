@page "/attempt/{AssignmentId}/{AttemptId}"

@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.IO
@using System.Net.Http.Headers;

@attribute [Authorize]

@inject NavigationManager NavMan; 

@if (assignmentModel != null)
{
    <MudLayout>
        <MudAppBar Elevation="0"
                   Color="Color.Primary"
                   Fixed="false">
            <MudText Typo="Typo.h5" Class="mudblazor-appbar-brand-text">
                Attempt @AttemptModel.AttemptId
            </MudText>
            <MudAppBarSpacer />
            <MudSwitch T="bool"
                       Class="ml-auto"
                       Color="Color.Secondary"
                       Label="Attempt marked"
                       Checked="AttemptModel.Completed"
                       @onclick="ToggleCompleteUpdateAssignment">
            </MudSwitch>
            <MudIconButton Icon="@Icons.Material.Filled.Save"
                           Size="Size.Large"
                           OnClick="UpdateAssignment">
            </MudIconButton>
        </MudAppBar>
        <MudMainContent>
            <MudOverlay @bind-Visible="AttemptModel.Completed" DarkBackground="true"></MudOverlay>
            <MudOverlay @bind-Visible="componentLoading" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
            </MudOverlay>
            <MudContainer MaxWidth="MaxWidth.Medium">
                <MudExpansionPanels MultiExpansion="true"
                                    Elevation="2">
                    @for (int i = 0; i < AttemptModel.Sections.Count; i++)
                    {
                        int local = i;

                        SectionModel temp = AttemptModel.Sections.ElementAt(i);

                        <MudExpansionPanel Text="@temp.SectionName"
                                           IsExpanded="true">
                            <Section @bind-SectionModel="temp"
                                     @bind-BankComments="assignmentModel.SectionCommentBanks[temp.SectionID]"
                                     OnUpdateAttempt="async () => await ServerCommunicator.UpdateAssignment(NavMan, assignmentModel, AttemptModel)"
                                     AttemptModel="AttemptModel"
                                     AssignmentModel="assignmentModel">
                            </Section>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>

            </MudContainer>
        </MudMainContent>
    </MudLayout>
}

@code {
    /// <summary>
    /// The unique ID of the current attempt.
    /// </summary>
    [Parameter]
    public string AttemptID { get; set; }

    /// <summary>
    /// The unique ID of the current assignment.
    /// </summary>
    [Parameter]
    public string AssignmentId { get; set; }

    /// <summary>
    /// The current attempt.
    /// </summary>
    [Parameter]
    public AttemptModel AttemptModel { get; set; }

    /// <summary>
    /// Callback for when the attempt is modified.
    /// </summary>
    [Parameter]
    public EventCallback<AttemptModel> AttemptModelChanged { get; set; }

    private HttpClient client = new HttpClient();

    private AssignmentModel assignmentModel;

    private bool componentLoading;

    /// <summary>
    /// Fetches the assignment from the server when the component is initialized.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        componentLoading = true;
        assignmentModel = await ServerCommunicator.FetchAssignment(NavMan, AssignmentId);
        AttemptModel = GetAttempt(AttemptID);
        componentLoading = false;
    }

    /// <summary>
    /// Gets a single attempt from the server.
    /// </summary>
    /// <param name="attemptId">The ID of the attempt to be fetched.</param>
    /// <returns></returns>
    public AttemptModel GetAttempt(string attemptId)
    {
        return assignmentModel.Attempts.Where(attempt => attempt.AttemptId == attemptId).First();
    }

    public async Task UpdateAssignment()
    {
        await ServerCommunicator.UpdateAssignment(NavMan, assignmentModel, AttemptModel);
    }

    public async Task ToggleCompleteUpdateAssignment()
    {
        AttemptModel.Completed = !AttemptModel.Completed;
        await ServerCommunicator.UpdateAssignment(NavMan, assignmentModel, AttemptModel);

    }
}
