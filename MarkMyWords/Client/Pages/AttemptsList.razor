@page "/attempts/{AssignmentId}"

@using System.Text
@using System.Text.Encodings
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.IO
@using System.Net.Http.Headers;

@attribute [Authorize]

@inject NavigationManager NavMan
@inject IDialogService Dialog
@inject IJSRuntime js
@inject ISnackbar Snackbar

<MudLayout>
    <MudAppBar Elevation="0"
               Color="Color.Primary"
               Fixed="false">
        @if (AssignmentModel != null)
        {
            <MudText Typo="Typo.h5" Class="mudblazor-appbar-brand-text">
                Assignment @AssignmentModel.AssignmentName
            </MudText>
            <MudAppBarSpacer />
            <MudSwitch T="bool"
                       Class="ml-auto"
                       Color="Color.Secondary"
                       Label="Completed"
                       Checked="AssignmentModel.Completed"
                       @onclick="UpdateAssignment">
            </MudSwitch>
            <MudIconButton Icon="@Icons.Filled.FileDownload"
                           Color="Color.Secondary"
                           OnClick="DownloadFile">
            </MudIconButton>
        }
    </MudAppBar>
    <MudMainContent>

        <MudContainer MaxWidth="MaxWidth.Medium">
            @if (AssignmentModel != null)
            {
                <MudSimpleTable Hover="true">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>ID</th>
                            <th>Completed</th>
                            <th>Locked</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (AttemptModel attempt in AssignmentModel.Attempts)
                        {
                            if (attempt.Locked)
                            {
                                <tr @onclick="LockedAlert"
                                    style="cursor: pointer">
                                    <td>@attempt.AttemptName</td>
                                    <td>@attempt.AttemptId</td>
                                    <td>@attempt.Completed</td>
                                    <td><MudIcon Icon="@Icons.Filled.Lock" Color="Color.Secondary"></MudIcon></td>
                                </tr>
                            }
                            else
                            {
                                <tr @onclick="async () => await ViewAttempt(attempt.AttemptId)"
                                    style="cursor: pointer">
                                    <td>@attempt.AttemptName</td>
                                    <td>@attempt.AttemptId</td>
                                    <td>@attempt.Completed</td>
                                    <td><MudIcon Icon="@Icons.Filled.LockOpen" Color="Color.Primary"></MudIcon></td>     
                                </tr>
                            }
                        }
                    </tbody>
                </MudSimpleTable>
            }
            else
            {
                <MudSimpleTable>
                    <thead>
                        <tr>
                            <th><MudSkeleton SkeletonType="SkeletonType.Text"></MudSkeleton></th>
                            <th><MudSkeleton SkeletonType="SkeletonType.Text"></MudSkeleton></th>
                            <th><MudSkeleton SkeletonType="SkeletonType.Text"></MudSkeleton></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < 10; i++)
                        {
                        <tr>
                            <td><MudSkeleton SkeletonType="SkeletonType.Text"></MudSkeleton></td>
                            <td><MudSkeleton SkeletonType="SkeletonType.Text"></MudSkeleton></td>
                            <td><MudSkeleton SkeletonType="SkeletonType.Text"></MudSkeleton></td>
                        </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            }
        </MudContainer>

    </MudMainContent>
</MudLayout>
@code{
    /// <summary>
    /// The unique ID of the current assignment.
    /// </summary>
    [Parameter]
    public string AssignmentId { get; set; }

    /// <summary>
    /// The current assignment.
    /// </summary>
    [Parameter]
    public AssignmentModel AssignmentModel { get; set; }

    private HttpClient client = new HttpClient();

    private string password;

    /// <summary>
    /// Fetches the assignment from the server when the parameters are set.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        AssignmentModel = null;
        DialogResult result;
        do
        {
            IDialogReference dialog = Dialog.Show<PasswordDialog>("Enter password");
            result = await dialog.Result;
            if (!result.Cancelled)
            {
                password = result.Data.ToString();
                await FetchAssignment();
                if (AssignmentModel == null)
                {
                    Snackbar.Clear();
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                    Snackbar.Configuration.SnackbarVariant = Variant.Filled;
                    Snackbar.Configuration.VisibleStateDuration = 5000;
                    Snackbar.Add("Incorrect password!", Severity.Error);
                }
            }
            else
            {
                NavMan.NavigateTo("/");
            }
        } while (!result.Cancelled);
    }

    private async Task FetchAssignment()
    {
        AssignmentModel = await ServerCommunicator.FetchAssignment(NavMan, AssignmentId, password);
    }

    private async void DownloadFile()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append($"Name,ID,Mark\n");
        foreach(AttemptModel attempt in AssignmentModel.Attempts)
        {
            int totalMark = 0;
            foreach(SectionModel section in attempt.Sections)
            {
                totalMark += section.GivenMark;
            }
            builder.Append($"{attempt.AttemptName},{attempt.AttemptId},{totalMark}\n");
        }
        Byte[] bytes = Encoding.UTF8.GetBytes(builder.ToString());
        await js.InvokeAsync<object>("saveAsFile", $"{AssignmentModel.AssignmentName} Marks.csv", Convert.ToBase64String(bytes));
    }

    private async Task UpdateAssignment()
    {
        AssignmentModel.Completed = !AssignmentModel.Completed;
        await ServerCommunicator.UpdateAssignmentProperties(NavMan, AssignmentModel, password);
        NavMan.NavigateTo("/", true);
    }

    private async Task ViewAttempt(string attemptId)
    {
        AssignmentModel.Attempts.Find(attempt => attempt.AttemptId == attemptId).Locked = true;
        DialogOptions options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium
        };
        DialogParameters parameters = new DialogParameters()
        {
            ["AttemptId"] = attemptId,
            ["AssignmentModel"] = AssignmentModel,
            ["Password"] = password
        };

        await ServerCommunicator.UpdateLock(NavMan, AssignmentId, attemptId, true);

        IDialogReference dialog = Dialog.Show<AttemptDialog>("Mark Attempt", parameters, options);

        DialogResult result = await dialog.Result;

        AssignmentModel.Attempts.Find(attempt => attempt.AttemptId == attemptId).Locked = false;
        AssignmentModel = null;

        await ServerCommunicator.UpdateLock(NavMan, AssignmentId, attemptId, false);

        await FetchAssignment();
    }

    private void LockedAlert()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.VisibleStateDuration = 5000;
        Snackbar.Add("Someone else is using this attempt!", Severity.Error);
    }
}
