@using FluentValidation

@inject IDialogService Dialog
@inject NavigationManager NavMan

<MudGrid Spacing="4">
    <MudItem xs="8">
        <MudAutocomplete T="CommentModel"
                         @ref="autocomplete"
                         Dense="true"
                         CoerceText="false"
                         SearchFunc="SortCommentsFunc"
                         ToStringFunc="@(e => e.Content)"
                         @bind-Value="@InputModel">
            <ItemTemplate Context="e">
                @if (e.CommentId != "FIRST")
                {
                    <MudGrid>

                        <MudItem xs="10"
                                 md="11">
                            <div>
                                <MudText>@e.Content</MudText>
                            </div>
                        </MudItem>

                        <MudItem xs="2" md="1">
                            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever"
                                           @onclick="async () => await DeleteBankComment(e)"
                                           Size="Size.Small">
                            </MudIconButton>
                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    <MudGrid>
                        <MudItem xs="10"
                                 md="11">
                            <div>
                                <MudText>@e.Content</MudText>
                            </div>
                        </MudItem>

                        <MudItem xs="2" md="1">
                            @*<MudIconButton Icon="@Icons.Material.Filled.Clear"
                                           Size="Size.Small"
                                           OnClick="() => InputModel = new CommentModel()">
                            </MudIconButton>*@
                        </MudItem>
                    </MudGrid>
                }
            </ItemTemplate>
        </MudAutocomplete>
        @for (int i = 0; i < SectionModel.Comments.Count; i++)
        {
            int local = i;

            CommentModel temp = SectionModel.Comments.ElementAt(i);
            <MudItem xs="12">
                <Comment @bind-CommentModel="temp"
                         @bind-BankComments="BankComments"
                         OnCommentDeleted="DeleteComment"
                         OnCommentEdited="UpdateComment">
                </Comment>
            </MudItem>
        }
    </MudItem>
    <MudItem xs="4">
        <MudGrid Spacing="1">
            @foreach (PointModel pointModel in SectionModel.Points)
            {
                if (pointModel is SliderPointModel sliderPointModel)
                {
                    <MudItem xs="12">
                        <MudSlider @bind-Value="sliderPointModel.Value" 
                                   Step="sliderPointModel.Step" 
                                   Min="sliderPointModel.Min" 
                                   Max="sliderPointModel.Max">
                        @sliderPointModel.Tag: @sliderPointModel.Value
                        </MudSlider>
                    </MudItem>
                }
                else if (pointModel is SwitchPointModel switchPointModel)
                {
                    <MudItem xs="12">
                        <MudSwitch @bind-Checked="switchPointModel.Value" 
                                   Color="Color.Primary" 
                                   Label="@switchPointModel.Tag">

                        </MudSwitch>
                    </MudItem>
                }
                else if(pointModel is SelectPointModel selectPointModel) 
                {
                    <MudItem xs="12">
                        <MudSelect T="string"
                                   @bind-Value="selectPointModel.Value"
                                   Label="@selectPointModel.Tag">
                            @foreach(string option in selectPointModel.Options)
                            {
                                <MudSelectItem Value="option"></MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
            }
        <MudItem xs="12">
            <div>
                @{
                    string suggestedMarkText = "Suggested mark: " + suggestedMark;
                    string maximumMarkText = "/" + maximumMark;
                }
                <MudTextField T="int"
                              @bind-Value="SectionModel.GivenMark"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentText="@maximumMarkText"
                              @onfocus="StartPrediction"
                              @onblur="EndPrediction">
                </MudTextField>
                <MudPopover @bind-Open="predictionVisible"
                            OffsetX="true"
                            Direction="Direction.Right"
                            Style="width: 247px; position: relative; left: 0px; height: 56px;">
                    <MudText Class="ma-4">
                        Suggested:@SectionModel.MinSuggestedMark - @SectionModel.MaxSuggestedMark
                    </MudText>
                    <MudOverlay Visible="predictionLoading" LightBackground="true" Absolute="true">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small"></MudProgressCircular>
                    </MudOverlay>
                </MudPopover>
            </div>
        </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    /// <summary>
    /// Contains data relating to a single section within an attempt.
    /// </summary>
    [Parameter]
    public SectionModel SectionModel { get; set; }
    [Parameter]
    public AttemptModel AttemptModel { get; set; }
    [Parameter]
    public AssignmentModel AssignmentModel { get; set; }
    /// <summary>
    /// Contains all the comments in a comment bank for a section.
    /// </summary>
    [Parameter]
    public List<CommentModel> BankComments { get; set; }

    /// <summary>
    /// Callback for when section data is modified..
    /// </summary>
    [Parameter]
    public EventCallback<SectionModel> SectionModelChanged { get; set; }
    /// <summary>
    /// Callback for when bank data is modified.
    /// </summary>
    [Parameter]
    public EventCallback<List<CommentModel>> BankCommentsChanged { get; set; }

    [Parameter]
    public EventCallback<SectionModel> OnUpdateAttempt { get; set; }

    [Parameter]
    public string Password { get; set; }

    private List<CommentModel> searchComments = new List<CommentModel>();

    private int suggestedMark = 6;
    private int maximumMark = 10;

    private MudAutocomplete<CommentModel> autocomplete;

    private bool predictionVisible = false;
    private bool predictionLoading = true;

    private CommentModel inputModel = new CommentModel();
    public CommentModel InputModel
    {
        get
        {
            return inputModel;
        }
        set
        {
            inputModel.Content = value.Content;
            if (!string.IsNullOrEmpty(value.Content))
            {
                CommentFromInput();
            }
        }
    }

    /// <summary>
    /// Triggers the callback to update bank comments in the parent component.
    /// </summary>
    /// <param name="comments">The updated comments.</param>
    /// <returns></returns>
    public async Task OnBankCommentsChanged(List<CommentModel> comments)
    {
        await BankCommentsChanged.InvokeAsync(comments);
    }

    /// <summary>
    /// Triggers the callback to update section comments in the parent component.
    /// </summary>
    /// <param name="comments">The updated comments.</param>
    private async Task SectionCommentsChanged(List<CommentModel> comments)
    {
        SectionModel.Comments = comments;
        await SectionModelChanged.InvokeAsync(SectionModel);
    }

    private async Task StartPrediction()
    {
        predictionVisible = true;
        predictionLoading = true;
        await UpdateAttempt();
        Dictionary<string, float> markRange = await ServerCommunicator.FetchMarkRange(NavMan, AssignmentModel, AttemptModel.AttemptId, SectionModel.SectionID, Password);
        SectionModel.MaxSuggestedMark = (int) markRange["max"];
        SectionModel.MinSuggestedMark = (int) markRange["min"];
        predictionLoading = false;
    }

    private void EndPrediction()
    {
        predictionVisible = false;
    }

    private async Task UpdateAttempt()
    {
        await OnUpdateAttempt.InvokeAsync(SectionModel);
    }

    /// <summary>
    /// Sorts the bank for the autocomplete component.
    /// </summary>
    /// <param name="sortString">The string to search for.</param>
    /// <returns>Array of CommentModels that contain the sortString.</returns>
    private async Task<IEnumerable<CommentModel>> SortCommentsFunc(string sortString)
    {
        // Creates a copy of BankComments but the objects within are references (intended).
        searchComments = new List<CommentModel>(BankComments);
        CommentModel firstComment = new CommentModel(sortString);
        firstComment.CommentId = "FIRST";
        // Blank comment to go at the start so the user can select whatever they are currently inputting.
        searchComments.Insert(0, firstComment);

        if (string.IsNullOrEmpty(sortString))
        {
            return (searchComments.ToArray());
        }

        IEnumerable<CommentModel> commentModels = searchComments.ToArray().Where(comment => comment.Content.Contains(sortString, StringComparison.InvariantCultureIgnoreCase) || string.IsNullOrWhiteSpace(comment.Content));

        return commentModels;
    }

    /// <summary>
    /// Deletes a single comment from the section.
    /// </summary>
    /// <param name="comment">Comment to be deleted.</param>
    /// <returns></returns>
    private async Task DeleteComment(CommentModel comment)
    {
        SectionModel.DeleteCommentInstance(comment.CommentId, BankComments);
        if (BankComments.Exists(bankComment => bankComment.CommentId == comment.OriginalCommentModelId))
        {

            CommentModel OriginalCommentModel = BankComments.Find(bankComment => bankComment.CommentId == comment.OriginalCommentModelId);
            if (OriginalCommentModel.Uses <= 0)
            {
                BankComments.Remove(OriginalCommentModel);
            }
        }
        await SectionModelChanged.InvokeAsync(SectionModel);
        await BankCommentsChanged.InvokeAsync(BankComments);
        StateHasChanged();
    }

    /// <summary>
    /// Deletes a single comment from the bank.
    /// </summary>
    /// <param name="comment">Comment to be deleted.</param>
    /// <returns></returns>
    private async Task DeleteBankComment(CommentModel comment)
    {
        await autocomplete.ToggleMenu();

        // Displays warning dialog.
        IDialogReference dialog = Dialog.Show<DeleteBankCommentDialog>("Delete comment");
        DialogResult result = await dialog.Result;

        // If the user submits.
        if (!result.Cancelled)
        {
            BankComments.Remove(comment);
            await BankCommentsChanged.InvokeAsync(BankComments);
        }
        StateHasChanged();
    }

    /// <summary>
    /// Updates a comment when it is edited.
    /// </summary>
    /// <param name="comment">The comment to be updated.</param>
    /// <returns></returns>
    private async Task UpdateComment(CommentModel comment)
    {
        if (BankComments.Exists(bankComment => bankComment.CommentId == comment.OriginalCommentModelId))
        {
            CommentModel OriginalCommentModel = BankComments.Find(bankComment => bankComment.CommentId == comment.OriginalCommentModelId);
            if (comment.EditMode == EditMode.Bank)
            {
                OriginalCommentModel.Content = comment.Content;
            }
            else if (comment.EditMode == EditMode.Instance)
            {
                // Warn user that major edits should be new comments
            }
            comment.EditMode = EditMode.None;
            // If it is not being used anywhere (across attempts).
            if (OriginalCommentModel.Uses <= 0)
            {
                // Remove comment from the bank.
                BankComments.Remove(OriginalCommentModel);
            }
        }
        await BankCommentsChanged.InvokeAsync(BankComments);
        await SectionModelChanged.InvokeAsync(SectionModel);
    }

    /// <summary>
    /// Creates a comment from another comment (a bank comment).
    /// </summary>
    /// <param name="comment">The comment to create another comment from.</param>
    /// <returns></returns>
    private async Task CommentFromBank(CommentModel comment)
    {
        SectionModel.NewCommentFromComment(comment);
        await SectionModelChanged.InvokeAsync(SectionModel);
        await BankCommentsChanged.InvokeAsync(BankComments);
        InputModel = new CommentModel();
    }

    /// <summary>
    /// Creates a comment from the text in the input.
    /// </summary>
    /// <returns></returns>
    private void CommentFromInput()
    {
        // This is to prevent the user from entering the exact same comment twice and
        // both being put in the bank.
        CommentModel bankComment = null;
        foreach (CommentModel comment in BankComments)
        {
            if (comment.Content == InputModel.Content)
            {
                bankComment = comment;
            }
        }

        if (!string.IsNullOrWhiteSpace(InputModel.Content))
        {
            if (bankComment == null)
            {
                // If an identical comment is found in the bank, the new comment is created 
                // from that instead.
                SectionModel.NewCommentFromString(BankComments, InputModel.Content);
            }
            else
            {
                SectionModel.NewCommentFromComment(bankComment);
            }
        }
    }
}