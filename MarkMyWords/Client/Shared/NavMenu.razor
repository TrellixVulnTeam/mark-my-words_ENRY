@using MudBlazor
@using Pages
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IDialogService Dialog;
@inject NavigationManager NavMan;

<MudNavMenu Class="mudblazor-navmenu">
    <AuthorizeView>
        <Authorized>
            <MudButton StartIcon="@Icons.Material.Outlined.Add"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="NewAssignment"
                       Class="ma-4">
                New Assignment
            </MudButton>
            <MudNavGroup Icon="@Icons.Material.Filled.School"
                         Title="Uncompleted Assignments"
                         Expanded="true">
                @foreach (Dictionary<string, string> assignmentInfo in uncompletedAssignmentsInfo)
                {
                    string assignmentId = "";
                    string assignmentName = "";
                    if (assignmentInfo.TryGetValue("AssignmentId", out assignmentId) && assignmentInfo.TryGetValue("AssignmentName", out assignmentName))
                    {
                        <MudNavLink Href="@($"/attempts/{assignmentId}")">@assignmentName</MudNavLink>
                    }
                }
            </MudNavGroup>
            <MudNavGroup Icon="@Icons.Material.Filled.School"
                         Title="Completed Assignments"
                         Expanded="false">
                @foreach (Dictionary<string, string> assignmentInfo in completedAssignmentsInfo)
                {
                    string assignmentId = "";
                    string assignmentName = "";
                    if (assignmentInfo.TryGetValue("AssignmentId", out assignmentId) && assignmentInfo.TryGetValue("AssignmentName", out assignmentName))
                    {
                        <MudNavLink Href="@($"/attempts/{assignmentId}")">@assignmentName</MudNavLink>
                    }
                }
            </MudNavGroup>
        </Authorized>
        <NotAuthorized>

        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    public List<Dictionary<string, string>> assignmentsInfo { get; set; } = new List<Dictionary<string, string>>();
    public List<Dictionary<string, string>> uncompletedAssignmentsInfo { get; set; } = new List<Dictionary<string, string>>();
    public List<Dictionary<string, string>> completedAssignmentsInfo { get; set; } = new List<Dictionary<string, string>>();

    protected async override Task OnInitializedAsync()
    {
        List<Dictionary<string, string>> assignmentsInfo = await RefreshAssignmentsList();
        foreach (Dictionary<string, string> assignmentInfo in assignmentsInfo)
        {
            string completed = "";
            if (assignmentInfo.TryGetValue("Completed", out completed) && completed == "False")
            {
                uncompletedAssignmentsInfo.Add(assignmentInfo);
            }
            else
            {
                completedAssignmentsInfo.Add(assignmentInfo);
            }
        }
    }

    private async Task NewAssignment()
    {
        DialogOptions options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium
        };
        IDialogReference dialog = Dialog.Show<CreateNewAssignmentDialog>("Create Assignment", options);
        DialogResult result = await dialog.Result;

        if (!result.Cancelled)
        {
            AssignmentModel assignmentModel = (AssignmentModel)result.Data;
            await ServerCommunicator.NewAssignment(NavMan, assignmentModel);
        }

        List<Dictionary<string, string>> assignmentsInfo = await RefreshAssignmentsList();
        foreach (Dictionary<string, string> assignmentInfo in assignmentsInfo)
        {
            string completed = "";
            if (assignmentInfo.TryGetValue("Completed", out completed) && completed == "True")
            {
                uncompletedAssignmentsInfo.Add(assignmentInfo);
            }
            else
            {
                completedAssignmentsInfo.Add(assignmentInfo);
            }
        }
    }

    private async Task<List<Dictionary<string, string>>> RefreshAssignmentsList()
    {
        return await ServerCommunicator.ListAssignments(NavMan);
    }
}
