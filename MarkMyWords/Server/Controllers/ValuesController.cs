using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Hosting;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Diagnostics;
using System.IO;

namespace MarkMyWords.Server.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ValuesController : ControllerBase
    {
        private readonly IWebHostEnvironment hostEnvironment;

        public ValuesController(IWebHostEnvironment webHostEnvironment)
        {
            hostEnvironment = webHostEnvironment;
        }

        // GET: api/<ValuesController>
        [HttpGet]
        public string Get()
        {
            string pythonExecutablePath = Path.Combine(hostEnvironment.ContentRootPath, "python39/python.exe");
            string pythonCodeFilePath = Path.Combine(hostEnvironment.ContentRootPath, "Python/model_training.py");
            string jsonAssignmentPath = Path.Combine(hostEnvironment.ContentRootPath, "test_assignment.json");
            string sectionId = "68fb5c46-4746-4b66-b0d2-6f11f950f915";
            string attemptId = "6017ffbc-d61c-46da-a8c5-21ef6d5a3f21";

            ProcessStartInfo start = new ProcessStartInfo
            {
                FileName = pythonExecutablePath,
                // Argument with file name and input parameters
                Arguments = $"{pythonCodeFilePath} {jsonAssignmentPath} {sectionId} {attemptId}",
                UseShellExecute = false,
                CreateNoWindow = true,
                // Any output, generated by application will be redirected back
                RedirectStandardOutput = true,
                // Any error in standard output will be redirected back (for example exceptions)
                RedirectStandardError = true,
                // Runs process elevated
                // THIS PROPERTY IS VITAL FOR THE PROCESS TO RUN ON THE AZURE APP SERVICE
                // Doesn't matter when running locally (or in development environment maybe?)
                Verb = "runas"
            };
            using Process process = Process.Start(start);
            using StreamReader reader = process.StandardOutput;
            string stderr = process.StandardError.ReadToEnd();
            string result = reader.ReadToEnd();
            return ($"result:\n{result}\n\nerror:\n{(string.IsNullOrWhiteSpace(stderr) ? "No errors." : stderr)}");
        }
    }
}
