@inherits LayoutComponentBase
@inject SignOutSessionStateManager SignOutManager
@inject NavigationManager NavMan
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MudBlazor

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       OnClick="@((e) => DrawerToggle())" />
        <MudAppBarSpacer />
        <AuthorizeView>
            <Authorized>
                Hello, @context.User.Identity.Name!
                <MudTooltip Text="Account">
                    <MudMenu Icon="@Icons.Material.Filled.AccountCircle" 
                             Color="Color.Inherit">
                        <MudMenuItem OnClick="BeginLogout">Log out</MudMenuItem>
                    </MudMenu>
                </MudTooltip>
            </Authorized>
            <NotAuthorized>
                <MudButton Color="Color.Inherit" 
                           OnClick='() => NavMan.NavigateTo("authentication/login")'>
                    Log in
                </MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open=_drawerOpen
               Elevation="5">
        <MudDrawerHeader Class="mudblazor-brand" LinkToIndex="true">
            <MudText Typo="Typo.h5">Go Mark Yourself</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mudblazor-main-content">
        @Body
    </MudMainContent>
</MudLayout>

@code{
    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        NavMan.NavigateTo("authentication/logout");
    }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}

