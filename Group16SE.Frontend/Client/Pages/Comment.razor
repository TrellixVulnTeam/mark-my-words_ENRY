@using Group16SE.Frontend.Shared
@using static Group16SE.Frontend.Shared.CommentModel
@using MudBlazor
<MudGrid>
    <MudItem xs="10" md="11">
        @if (CommentModel.EditMode == EditMode.Bank && CommentModel.OriginalCommentModel != null)
        {
            <MudTextField T="string"
                          @bind-Value="CommentModel.OriginalCommentModel.Content"
                          @oninput="(e) => CommentModel.Content = (string) e.Value"
                          @onfocus="() => EditComment(EditMode.Bank)"
                          @onblur="async(e) => await ReadComment()"
                          ReadOnly="ReadonlyComment"
                          Variant="Variant.Outlined"
                          Lines="2"
                          Label="@currentLabel">
            </MudTextField>
        }
        else
        {
            <MudTextField T="string"
                          @bind-Value="CommentModel.Content"
                          @oninput="(e) => CommentModel.Content = (string) e.Value"
                          @onfocus="() => EditComment(EditMode.Instance)"
                          @onblur="async(e) => await ReadComment()"
                          ReadOnly="ReadonlyComment"
                          Variant="Variant.Outlined"
                          Lines="2"
                          Label="@currentLabel">
            </MudTextField>
        }
    </MudItem>
    <MudItem xs="2" md="1" Class="d-flex align-center justify-end">
        <MudMenu Icon="@Icons.Material.MoreVert" Class="ml-1">
            <MudMenuItem OnClick="() => EditComment(EditMode.Instance)">Edit this</MudMenuItem>
                @if (CommentModel.OriginalCommentModel != null)
                {
                    <MudMenuItem OnClick="() => EditComment(EditMode.Bank)">Edit bank</MudMenuItem>
                }
            <MudMenuItem OnClick="DeleteComment">Delete</MudMenuItem>
        </MudMenu>
    </MudItem>
</MudGrid>
@code {
    /// <summary>
    /// Contains data relating to a single comment
    /// </summary>
    [Parameter]
    public CommentModel CommentModel { get; set; }
    /// <summary>
    /// Callback for when data changes
    /// </summary>
    [Parameter]
    public EventCallback<CommentModel> CommentModelChanged { get; set; }
    /// <summary>
    /// Callback for when a comment is edited
    /// </summary>
    [Parameter]
    public EventCallback<CommentModel> OnCommentEdited { get; set; }
    /// <summary>
    /// Callback for when a comment is deleted
    /// </summary>
    [Parameter]
    public EventCallback<CommentModel> OnCommentDeleted { get; set; }
    /// <summary>
    /// Determines if a comment should be readonly (cannot be edited or deleted)
    /// </summary>
    [Parameter]
    public bool ReadonlyComment { get; set; } = true;

    private string instanceLabel = "Editing section comment";
    private string bankLabel = "Editing bank comment";
    private string currentLabel = "";

    private string previousContent = "";

    /// <summary>
    /// Chenges the EditMode of the comment so it can be edited, or it's original can be edited
    /// </summary>
    private void EditComment(EditMode mode)
    {
        previousContent = CommentModel.Content;

        CommentModel.EditMode = mode;

        switch (CommentModel.EditMode)
        {
            case EditMode.Bank:
                currentLabel = bankLabel;
                break;
            case EditMode.Instance:
                currentLabel = instanceLabel;
                break;
            case EditMode.None:
            default:
                break;
        }
        CommentModel.Content.Replace("/\n/g", "");
        ReadonlyComment = false;
    }

    /// <summary>
    /// Triggers a callback to update the comments values in the parent container and makes the comment readonly
    /// </summary>
    /// <returns></returns>
    private async Task ReadComment()
    {
        currentLabel = "";
        ReadonlyComment = true;
        if(CommentModel.Content != previousContent)
        {
            await CommentModelChanged.InvokeAsync(CommentModel);
            await OnCommentEdited.InvokeAsync(CommentModel);
        }
    }

    /// <summary>
    /// Triggers the callback to delete comments in the parent container
    /// </summary>
    /// <returns></returns>
    private async Task DeleteComment()
    {
        await OnCommentDeleted.InvokeAsync(CommentModel);
    }
}
