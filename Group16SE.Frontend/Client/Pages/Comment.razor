@using Group16SE.Frontend.Shared
@using MudBlazor

<MudTextField T="string" 
              @bind-Value="CommentModel.Content" 
              @oninput="@((e) => 
                          {
                              CommentModel.Content = (string) e.Value;
                          })" 
              @onfocus="EditComment"
              @onblur="@(async(e) => 
                         {
                             currentLabel = "";
                             ReadonlyComment = true; 
                             await ReadComment(); 
                         })" 
              ReadOnly="ReadonlyComment" 
              Variant="Variant.Outlined" 
              Lines="2" 
              Adornment="Adornment.End" 
              Label="@currentLabel"
              AdornmentIcon="@Icons.Material.Delete" 
              OnAdornmentClick="DeleteComment">
</MudTextField>
@*<MudIconButton Icon="@Icons.Material.Create" @onclick="EditComment" Size="Size.Small"></MudIconButton>*@
@*<MudIconButton Icon="@Icons.Material.Delete" @onclick="DeleteComment" Size="Size.Small"></MudIconButton>*@

@code {
    /// <summary>
    /// Contains data relating to a single comment
    /// </summary>
    [Parameter]
    public CommentModel CommentModel { get; set; }
    /// <summary>
    /// Callback for when data changes
    /// </summary>
    [Parameter]
    public EventCallback<CommentModel> CommentModelChanged { get; set; }
    /// <summary>
    /// Callback for when a comment is deleted
    /// </summary>
    [Parameter]
    public EventCallback<CommentModel> OnCommentDeleted { get; set; }
    /// <summary>
    /// Determines if a comment should be readonly (cannot be edited or deleted)
    /// </summary>
    [Parameter]
    public bool ReadonlyComment { get; set; } = true;

    [Parameter]
    public CommentModel.EditMode EditMode { get; set; }

    private string instanceLabel = "Editing section comment";
    private string bankLabel = "Editing bank comment";
    private string currentLabel = "";

    /// <summary>
    /// Updates a comment so the text area can have values entered in it
    /// </summary>
    private void EditComment()
    {
        EditMode = CommentModel.EditMode.Instance;
        switch (EditMode)
        {
            case CommentModel.EditMode.Bank:
                currentLabel = bankLabel;
                break;
            case CommentModel.EditMode.Instance:
                currentLabel = instanceLabel;
                break;
            case CommentModel.EditMode.None:
            default:
                break;
        }
        CommentModel.Content.Replace("/\n/g", "");
        ReadonlyComment = false;
    }

    /// <summary>
    /// Triggers a callback to update the comments values in the parent container and makes the comment readonly (grayed out)
    /// </summary>
    /// <returns></returns>
    private async Task ReadComment()
    {
        await CommentModelChanged.InvokeAsync(CommentModel);
        ReadonlyComment = true;
    }

    /// <summary>
    /// Triggers the callback to delete comments in the parent container
    /// </summary>
    /// <returns></returns>
    private async Task DeleteComment()
    {
        await OnCommentDeleted.InvokeAsync(CommentModel);
    }
}
