@using Group16SE.Frontend.Shared
@using MudBlazor

@inject IDialogService Dialog

<MudGrid Spacing="4">
    <MudItem xs="8">
        <MudAutocomplete T="CommentModel"
                         ResetValueOnEmptyText="true"
                         Dense="true"
                         @ref="autocomplete"
                         @bind-Text="@CommentInputText"
                         @bind-Placeholder="@SavedInputText"
                         OnKeyUp="KeyPressed"
                         @onfocus="() => CommentInputText = SavedInputText"
                         SearchFunc="SortCommentsFunc"
                         ToStringFunc="@(e => e.Content)"
                         Immediate="true">
            <ItemTemplate Context="e">
                @if (!string.IsNullOrWhiteSpace(e.Content))
                {
                    <MudGrid>

                        <MudItem xs="10"
                                 md="11">
                            <div @onclick='async () =>
                                           {
                                               await CommentFromBank(BankComments.Where(comment => comment.Content == e.Content).ElementAt(0));
                                           }'>
                                <MudHighlighter Class="pa-1 mud-elevation-2 mud-theme-primary"
                                                UntilNextBoundary="true"
                                                Style="background-color:transparent; font-weight:bold; padding:initial"
                                                Text="@e.Content"
                                                HighlightedText="@CommentInputText">
                                </MudHighlighter>
                            </div>
                        </MudItem>

                        <MudItem xs="2" md="1">
                            <MudIconButton Icon="@Icons.Material.DeleteForever"
                                           @onclick='async () =>
                                                     {
                                                         // This is a hack to force the dropdown to refresh
                                                         autocomplete.ToggleMenu();
                                                         IDialogReference dialog = Dialog.Show<DeleteBankCommentDialog>("Delete comment");
                                                         DialogResult result = await dialog.Result;
                                                         if (!result.Cancelled)
                                                         {
                                                             await DeleteBankComment(e);
                                                         }
                                                     }'
                                           Size="Size.Small">
                            </MudIconButton>
                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    <MudGrid>
                        <MudItem xs="10"
                                 md="11">
                            <div @onclick='async () =>
                                           {
                                               await CommentFromInput();
                                           }'>
                                <MudHighlighter Class="pa-1 mud-elevation-2 mud-theme-primary"
                                                UntilNextBoundary="true"
                                                Style="background-color:transparent; font-weight:bold; padding:initial"
                                                @bind-Text="@CommentInputText"
                                                HighlightedText="@CommentInputText">
                                </MudHighlighter>
                            </div>
                        </MudItem>

                        <MudItem xs="2" md="1">
                            <MudIconButton Icon="@Icons.Material.Clear"
                                           @onclick='async () =>
                                                     {
                                                         CommentInputText = "";
                                                         SavedInputText = "(*_*)";
                                                         autocomplete.ToggleMenu();
                                                     }'
                                           Size="Size.Small">
                            </MudIconButton>
                        </MudItem>
                    </MudGrid>
                }
            </ItemTemplate>
        </MudAutocomplete>
        @for (int i = 0; i < SectionModel.Comments.Count; i++)
        {
            int local = i;

            CommentModel temp = SectionModel.Comments.ElementAt(i);
            <MudItem xs="12">
                <Comment @bind-CommentModel="temp"
                         OnCommentDeleted="DeleteComment"
                         EditMode="CommentModel.EditMode.None">
                </Comment>
            </MudItem>
        }
    </MudItem>
    <MudItem xs="4">
        <MudGrid Spacing="1">
            @for (int i = 0; i < SectionModel.SliderPoints.Count; i++)
            {
                int local = i;
                <MudItem xs="12">
                    @{
                        SliderPointModel sliderPointModel = SectionModel.SliderPoints[local];
                        <MudSlider @bind-Value="sliderPointModel.Value" Step="sliderPointModel.Step" Min="sliderPointModel.Min" Max="sliderPointModel.Max">@sliderPointModel.Tag: @sliderPointModel.Value</MudSlider>
                    }
                </MudItem>
            }
            @for (int i = 0; i < SectionModel.SwitchPoints.Count; i++)
            {
                int local = i;
                <MudItem xs="12">
                    @{
                        SwitchPointModel switchPointModel = SectionModel.SwitchPoints[local];
                        <MudSwitch @bind-Checked="switchPointModel.Value" Color="Color.Primary" Label="@switchPointModel.Tag"></MudSwitch>
                    }
                </MudItem>
            }
            @for (int i = 0; i < SectionModel.AutocompletePoints.Count; i++)
            {
                int local = i;
                <MudItem xs="12">
                    @{
                        AutocompletePointModel autocompletePointModel = SectionModel.AutocompletePoints[local];
                        <MudAutocomplete @bind-Value="autocompletePointModel.Value"></MudAutocomplete>
                    }
                </MudItem>
            }
            <MudItem xs="12">
                @{
                    string suggestedMarkText = "Suggested mark: " + suggestedMark;
                    string maximumMarkText = "/" + maximumMark;
                }
                <MudTextField T="string" HelperText="@suggestedMarkText" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@maximumMarkText" />
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
        /// <summary>
        /// Contains data relating to a single section within an attempt
        /// </summary>
        [Parameter]
        public SectionModel SectionModel { get; set; }
        /// <summary>
        /// Contains all the comments in a comment bank for a section
        /// </summary>
        [Parameter]
        public List<CommentModel> BankComments { get; set; }

        /// <summary>
        /// Callback for when section data is changed
        /// </summary>
        [Parameter]
        public EventCallback<SectionModel> SectionModelChanged { get; set; }
        /// <summary>
        /// Callback for when bank data is changed
        /// </summary>
        [Parameter]
        public EventCallback<List<CommentModel>> BankCommentsChanged { get; set; }

    private List<CommentModel> searchComments;

    private int suggestedMark = 6;
    private int maximumMark = 10;

    private string inputText;
    private string savedText;

    public string SavedInputText
    {
        get
        {
            return (savedText);
        }
        set
        {
            if (value == "(*_*)")
            {
                savedText = "";
            }
            else if (!string.IsNullOrWhiteSpace(value))
            {
                savedText = value;
            }
        }
    }

    public string CommentInputText
    {
        get
        {
            return inputText;
        }
        set
        {
            inputText = value;

            if (string.IsNullOrWhiteSpace(value))
            {
                SavedInputText = inputText;
            }
        }
    }

    private MudAutocomplete<CommentModel> autocomplete;

    /// <summary>
    /// Triggers the callback to update bank comments in the parent component
    /// </summary>
    /// <param name="comments">The updated comments</param>
    /// <returns></returns>
    public async Task OnBankCommentsChanged(List<CommentModel> comments)
    {
        await BankCommentsChanged.InvokeAsync(comments);
    }

    /// <summary>
    /// Triggers the callback to update section comments in the parent component
    /// </summary>
    /// <param name="comments">The updated comments</param>
    private async Task SectionCommentsChanged(List<CommentModel> comments)
    {
        SectionModel.Comments = comments;
        await SectionModelChanged.InvokeAsync(SectionModel);
    }

    private async Task<IEnumerable<CommentModel>> SortCommentsFunc(string sortString)
    {
        SavedInputText = sortString;

        searchComments = new List<CommentModel>(BankComments);
        searchComments.Insert(0, new CommentModel());

        if (string.IsNullOrEmpty(sortString))
        {
            return (searchComments.ToArray());
        }
        return searchComments.ToArray().Where(comment => comment.Content.Contains(sortString, StringComparison.InvariantCultureIgnoreCase) || string.IsNullOrWhiteSpace(comment.Content));
    }

    private async Task KeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CommentFromInput();
        }
        else if (e.Key == "Backspace")
        {
            if (SavedInputText.Length == 1)
            {
                SavedInputText = "(*_*)";
            }
        }
    }

    private void RefreshAutocomplete()
    {
        autocomplete.ToggleMenu();
        autocomplete.ToggleMenu();
    }

    private async Task DeleteComment(CommentModel comment)
    {
        SectionModel.Comments.Remove(comment);
        await SectionModelChanged.InvokeAsync(SectionModel);
    }

    private async Task DeleteBankComment(CommentModel comment)
    {
        BankComments.Remove(comment);
        await BankCommentsChanged.InvokeAsync(BankComments);
    }

    private async Task CommentFromBank(CommentModel comment)
    {
        CommentModel newComment = new CommentModel(comment);
        newComment.OriginalCommentModel = comment;
        SectionModel.Comments.Add(newComment);
        CommentInputText = "";
        SavedInputText = "(*_*)";
        await SectionModelChanged.InvokeAsync(SectionModel);
    }

    private async Task CommentFromInput()
    {
        SavedInputText = CommentInputText;
        if (!string.IsNullOrWhiteSpace(SavedInputText)) 
        {
            CommentModel newComment = new CommentModel(SavedInputText);
            SectionModel.Comments.Add(newComment);
            CommentInputText = "";
            SavedInputText = "(*_*)";
            await SectionModelChanged.InvokeAsync(SectionModel);
        } 
    }
}