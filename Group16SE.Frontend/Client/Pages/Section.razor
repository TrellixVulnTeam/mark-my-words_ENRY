@using Group16SE.Frontend.Shared
@using MudBlazor

<br />
<MudGrid Spacing="4">
    <MudItem xs="4">
        <CommentContainer IsSearchable="true" @bind-Comments="BankComments" OnCommentAdded="NewComment" OnCommentMoved="MoveComment" IsEditable="false"></CommentContainer>
    </MudItem>
    <MudItem xs="4">
        <CommentContainer IsSearchable="false" @bind-Comments="SectionModel.Comments" IsEditable="true"></CommentContainer>
    </MudItem>
    <MudItem xs="4">
        <MudGrid Spacing="1">
            @for (int i = 0; i < SectionModel.SliderPoints.Count; i++)
            {
                int local = i;
                <MudItem xs="12">
                    @{
                        SliderPointModel sliderPointModel = SectionModel.SliderPoints[local];
                        <MudSlider @bind-Value="sliderPointModel.Value" Step="sliderPointModel.Step" Min="sliderPointModel.Min" Max="sliderPointModel.Max">@sliderPointModel.Tag: @sliderPointModel.Value</MudSlider>
                    }
                </MudItem>
            }
            @for (int i = 0; i < SectionModel.SwitchPoints.Count; i++)
            {
                int local = i;
                <MudItem xs="12">
                    @{
                        SwitchPointModel switchPointModel = SectionModel.SwitchPoints[local];
                        <MudSwitch @bind-Checked="switchPointModel.Value" Color="Color.Primary" Label="@switchPointModel.Tag"></MudSwitch>
                    }
                </MudItem>
            }
            @for (int i = 0; i < SectionModel.AutocompletePoints.Count; i++)
            {
                int local = i;
                <MudItem xs="12">
                    @{
                        AutocompletePointModel autocompletePointModel = SectionModel.AutocompletePoints[local];
                        <MudAutocomplete @bind-Value="autocompletePointModel.Value"></MudAutocomplete>
                    }
                </MudItem>
            }
            <MudItem xs="12">
                @{
                    string suggestedMarkText = "Suggested mark: " + suggestedMark;
                    string maximumMarkText = "/" + maximumMark;
                }
                <MudTextField T="string" HelperText="@suggestedMarkText" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="@maximumMarkText" />
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    /// <summary>
    /// Contains data relating to a single section within an attempt
    /// </summary>
    [Parameter]
    public SectionModel SectionModel { get; set; }
    /// <summary>
    /// Contains all the comments in a comment bank for a section
    /// </summary>
    [Parameter]
    public List<CommentModel> BankComments { get; set; }

    /// <summary>
    /// Callback for when section data is changed
    /// </summary>
    [Parameter]
    public EventCallback<SectionModel> SectionModelChanged { get; set; }
    /// <summary>
    /// Callback for when bank data is changed
    /// </summary>
    [Parameter]
    public EventCallback<List<CommentModel>> BankCommentsChanged { get; set; }

    private int suggestedMark = 6;
    private int maximumMark = 10;

    /// <summary>
    /// Adds a new comment to a comment container
    /// </summary>
    /// <param name="commentModel">The comment to add to the container</param>
    /// <returns></returns>
    public async Task NewComment(CommentModel commentModel)
    {
        SectionModel.Comments.Add(commentModel);
        await SectionModelChanged.InvokeAsync(SectionModel);
    }

    public async Task MoveComment(CommentModel commentModel)
    {
        SectionModel.Comments.Add(commentModel);
        await SectionModelChanged.InvokeAsync(SectionModel);
    }

    /// <summary>
    /// Triggers the callback to update bank comments in the parent component
    /// </summary>
    /// <param name="comments">The updated comments</param>
    /// <returns></returns>
    public async Task OnBankCommentsChanged(List<CommentModel> comments)
    {
        await BankCommentsChanged.InvokeAsync(comments);
    }

    /// <summary>
    /// Triggers the callback to update section comments in the parent component
    /// </summary>
    /// <param name="comments">The updated comments</param>
    private void SectionCommentsChanged(List<CommentModel> comments)
    {
        SectionModel.Comments = comments;
    }
}