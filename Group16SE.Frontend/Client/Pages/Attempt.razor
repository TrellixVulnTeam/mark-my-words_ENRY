@page "/"
@using Group16SE.Frontend.Shared
@using MudBlazor
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.IO

<MudTabs Elevation="1">
    <MudTabPanel Text="Section 1">
        <Section @bind-SectionModel="assignmentModel.Attempts[0].Sections[0]" @bind-BankComments='assignmentModel.SectionCommentBanks["1"]'></Section>
    </MudTabPanel>
    <MudTabPanel Text="Section 2">
        <Section @bind-SectionModel="assignmentModel.Attempts[0].Sections[1]" @bind-BankComments='assignmentModel.SectionCommentBanks["2"]'></Section>
    </MudTabPanel>
    <MudTabPanel Text="Summary">

    </MudTabPanel>
    @{
        JsonSerializerOptions options = new JsonSerializerOptions()
        {
            //ReferenceHandler = ReferenceHandler.Preserve
            //WriteIndented = true
        };
        //attemptModel = JsonSerializer.Deserialize<AttemptModel>(JsonSerializer.Serialize(attemptModel, options), options);
        Console.WriteLine(JsonSerializer.Serialize(assignmentModel, options));
    }
</MudTabs>

@code {
    // Just for demonstration & testing purposes
    private AssignmentModel assignmentModel = new AssignmentModel(new List<AttemptModel>()
    {
        new AttemptModel(new List<SectionModel>()
    {
            {
                new SectionModel(new List<CommentModel>()
                {
                    {
                        new CommentModel("This is a comment in section 1")
                    },
                    {
                        new CommentModel("This is another but with different words")
                    },
                    {
                        new CommentModel("Short Comment")
                    },
                    {
                        new CommentModel("This is a quite long comment that could be even longer, many, many lines even")
                    }
                }, switchPoints: new List<SwitchPointModel>()
                {
                    {
                        new SwitchPointModel("Completed")
                    },
                    {
                        new SwitchPointModel("Original")
                    }
                }, sliderPoints: new List<SliderPointModel>()
                {
                    {
                        new SliderPointModel("Code Quality", 1, 0, 0, 5)
                    },
                    {
                        new SliderPointModel("Grammar", 1, 0, 0, 3)
                    },
                    {
                        new SliderPointModel("Understanding", 1, 0, 0, 10)
                     }
                })
            },
            {
                new SectionModel(new List<CommentModel>()
                {
                    {
                        new CommentModel("This is a comment in section 2")
                    },
                    {
                        new CommentModel("This is another but with different words")
                    }
                }, sliderPoints: new List<SliderPointModel>()
                {
                     {
                        new SliderPointModel("Understanding", 1, 0, 0, 10)
                     }
                })
            }
        })
    }, new Dictionary<string, List<CommentModel>>
    {
        {
            "1",
            new List<CommentModel>
            {
                new CommentModel("A comment from the section 1 comment bank"),
                new CommentModel("Another comment from the section 1 comment bank"),
                new CommentModel("A final comment from the section 1 comment bank")
            }
        },
        {
            "2",
            new List<CommentModel>
            {
                new CommentModel("A comment from the section 2 comment bank")
            }
        }
    });
}
