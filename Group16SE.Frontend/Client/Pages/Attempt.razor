@page "/attempt"

@using Group16SE.Frontend.Shared
@using MudBlazor
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.IO
@using System.Net.Http.Headers;

@if (assignmentModel != null)
{
    <MudLayout>

        <MudAppBar Elevation="0"
                   Color="Color.Primary"
                   Fixed="false">
            <MudText Typo="Typo.h5" Class="mudblazor-appbar-brand-text">
                Attempt ttnt59
            </MudText>
            <MudAppBarSpacer />
            <MudSwitch Class="ml-auto"
                       Color="Color.Secondary"
                       Label="Attempt marked"
                       @bind-Checked="assignmentModel.Attempts[0].Completed">
            </MudSwitch>
        </MudAppBar>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Medium">
                @*<MudOverlay @bind-Visible="assignmentModel.Attempts[0].Completed" LightBackground="true" Absolute="true"></MudOverlay>*@

                <MudExpansionPanels MultiExpansion="true"
                                    Elevation="2">
                    @for (int i = 0; i < assignmentModel.Attempts[0].Sections.Count; i++)
                    {
                        int local = i;

                        SectionModel temp = assignmentModel.Attempts[0].Sections.ElementAt(i);

                        <MudExpansionPanel Text="@temp.SectionID">
                            <Section @bind-SectionModel="temp"
                                     @bind-BankComments='assignmentModel.SectionCommentBanks[temp.SectionID]'>
                            </Section>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
                
            </MudContainer>
        </MudMainContent>
    </MudLayout>
    <MudIconButton Icon="@Icons.Material.Save" Size="Size.Large" OnClick="async () => await AssignmentToServer() "></MudIconButton>
}

@code {
    [Parameter]
    public string AttemptID { get; set; }

    [Parameter]
    public AttemptModel AttemptModel { get; set; }

    [Parameter]
    public EventCallback<AttemptModel> AttemptModelChanged { get; set; }

    private HttpClient client = new HttpClient();

    private AssignmentModel assignmentModel;

    protected override async Task OnInitializedAsync()
    {
        await AssignmentFromServer();
    }

    public async Task AssignmentToServer()
    {
        HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Post, "https://localhost:44387/api/assignment");

        JsonSerializerOptions options = new JsonSerializerOptions()
        {
            ReferenceHandler = ReferenceHandler.Preserve,
            WriteIndented = true
        };

        requestMessage.Content = new StringContent(JsonSerializer.Serialize<AssignmentModel>(assignmentModel, options), Encoding.UTF8, "application/json");
        requestMessage.Headers.Add("AssignmentId", "Test Assignment");
        requestMessage.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

        HttpResponseMessage responseMessage = await client.SendAsync(requestMessage);

        responseMessage.EnsureSuccessStatusCode();
    }

    public async Task AssignmentFromServer()
    {
        HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Get, "https://localhost:44387/api/assignment");

        JsonSerializerOptions options = new JsonSerializerOptions()
        {
            ReferenceHandler = ReferenceHandler.Preserve,
            WriteIndented = true
        };

        requestMessage.Headers.Add("AssignmentId", "Test Assignment");
        requestMessage.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

        HttpResponseMessage responseMessage = await client.SendAsync(requestMessage);

        Stream jsonStream = await responseMessage.Content.ReadAsStreamAsync();
        assignmentModel = await JsonSerializer.DeserializeAsync<AssignmentModel>(jsonStream, options);

        responseMessage.EnsureSuccessStatusCode();
    }
}
